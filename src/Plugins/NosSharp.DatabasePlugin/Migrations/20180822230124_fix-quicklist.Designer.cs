// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NosSharp.DatabasePlugin.Context;

namespace NosSharp.DatabasePlugin.Migrations
{
    [DbContext(typeof(NosSharpContext))]
    [Migration("20180822230124_fix-quicklist")]
    partial class fixquicklist
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.CardBCardModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CastType");

                    b.Property<int>("FirstData");

                    b.Property<bool>("IsLevelDivided");

                    b.Property<bool>("IsLevelScaled");

                    b.Property<long>("RelationId")
                        .HasColumnName("CardId");

                    b.Property<int>("SecondData");

                    b.Property<byte>("SubType");

                    b.Property<int>("ThirdData");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("_data_card_bcard");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.ItemBCardModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CastType");

                    b.Property<int>("FirstData");

                    b.Property<bool>("IsLevelDivided");

                    b.Property<bool>("IsLevelScaled");

                    b.Property<long>("RelationId")
                        .HasColumnName("ItemId");

                    b.Property<int>("SecondData");

                    b.Property<byte>("SubType");

                    b.Property<int>("ThirdData");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("_data_item_bcard");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.NpcMonsterBCardModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CastType");

                    b.Property<int>("FirstData");

                    b.Property<bool>("IsLevelDivided");

                    b.Property<bool>("IsLevelScaled");

                    b.Property<long>("RelationId")
                        .HasColumnName("NpcMonsterId");

                    b.Property<int>("SecondData");

                    b.Property<byte>("SubType");

                    b.Property<int>("ThirdData");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("_data_npc_monster_bcard");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.SkillBCardModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CastType");

                    b.Property<int>("FirstData");

                    b.Property<bool>("IsLevelDivided");

                    b.Property<bool>("IsLevelScaled");

                    b.Property<long>("RelationId")
                        .HasColumnName("SkillId");

                    b.Property<int>("SecondData");

                    b.Property<byte>("SubType");

                    b.Property<int>("ThirdData");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("_data_skill_bcard");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.CardModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("BuffType");

                    b.Property<int>("Delay");

                    b.Property<int>("Duration");

                    b.Property<int>("EffectId");

                    b.Property<byte>("Level");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte>("Propability");

                    b.Property<short>("TimeoutBuff");

                    b.Property<byte>("TimeoutBuffChance");

                    b.HasKey("Id");

                    b.ToTable("_data_card");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.AccountModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Authority");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("RegistrationEmail")
                        .HasMaxLength(50);

                    b.Property<string>("RegistrationIp")
                        .HasMaxLength(50);

                    b.Property<string>("RegistrationToken")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Ammo");

                    b.Property<short>("Amount");

                    b.Property<byte>("AttackPoints");

                    b.Property<long?>("BoundCharacterId");

                    b.Property<byte>("Cellon");

                    b.Property<long>("CharacterId");

                    b.Property<short>("CloseDefense");

                    b.Property<short>("CloseDodge");

                    b.Property<short>("Concentration");

                    b.Property<short>("CriticalDamageRate");

                    b.Property<short>("CriticalDodge");

                    b.Property<short>("CriticalRate");

                    b.Property<short>("DamageMaximum");

                    b.Property<short>("DamageMinimum");

                    b.Property<short>("DarkPower");

                    b.Property<short>("DarkResistance");

                    b.Property<byte>("DefensePoints");

                    b.Property<byte>("Design");

                    b.Property<byte>("ElementPoints");

                    b.Property<short>("ElementRate");

                    b.Property<int>("ElementType");

                    b.Property<short>("FirePower");

                    b.Property<short>("FireResistance");

                    b.Property<short>("HitRate");

                    b.Property<short>("Hp");

                    b.Property<byte>("HpMpPoints");

                    b.Property<long>("ItemId");

                    b.Property<byte>("Level");

                    b.Property<short>("LightPower");

                    b.Property<short>("LightResistance");

                    b.Property<short>("MagicDefense");

                    b.Property<short>("MagicDodge");

                    b.Property<short>("Mp");

                    b.Property<short>("RangeDefense");

                    b.Property<short>("RangeDodge");

                    b.Property<byte>("Rarity");

                    b.Property<short>("Slot");

                    b.Property<byte>("SpecialistUpgrade");

                    b.Property<byte>("SpecialistUpgrade2");

                    b.Property<byte>("Sum");

                    b.Property<byte>("Type");

                    b.Property<byte>("Upgrade");

                    b.Property<short>("WaterPower");

                    b.Property<short>("WaterResistance");

                    b.Property<long>("Xp");

                    b.HasKey("Id");

                    b.HasIndex("BoundCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("character_item");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterMateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Attack");

                    b.Property<bool>("CanPickUp");

                    b.Property<long>("CharacterId");

                    b.Property<byte>("Defence");

                    b.Property<byte>("Direction");

                    b.Property<long>("Experience");

                    b.Property<int>("Hp");

                    b.Property<bool>("IsSummonable");

                    b.Property<bool>("IsTeamMember");

                    b.Property<byte>("Level");

                    b.Property<short>("Loyalty");

                    b.Property<short>("MapX");

                    b.Property<short>("MapY");

                    b.Property<int>("Mp");

                    b.Property<string>("Name");

                    b.Property<long>("NpcMonsterId");

                    b.Property<short>("Skin");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("NpcMonsterId");

                    b.ToTable("character_mate");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<int>("Act4Dead");

                    b.Property<int>("Act4Kill");

                    b.Property<int>("Act4Points");

                    b.Property<bool>("ArenaWinner");

                    b.Property<string>("Biography");

                    b.Property<bool>("BuffBlocked");

                    b.Property<byte>("Class");

                    b.Property<short>("Compliment");

                    b.Property<float>("Dignity");

                    b.Property<bool>("EmoticonsBlocked");

                    b.Property<bool>("ExchangeBlocked");

                    b.Property<byte>("Faction");

                    b.Property<bool>("FamilyRequestBlocked");

                    b.Property<bool>("FriendRequestBlocked");

                    b.Property<byte>("Gender");

                    b.Property<long>("Gold");

                    b.Property<bool>("GroupRequestBlocked");

                    b.Property<byte>("HairColor");

                    b.Property<byte>("HairStyle");

                    b.Property<bool>("HeroChatBlocked");

                    b.Property<byte>("HeroLevel");

                    b.Property<long>("HeroXp");

                    b.Property<int>("Hp");

                    b.Property<bool>("HpBlocked");

                    b.Property<byte>("JobLevel");

                    b.Property<long>("JobLevelXp");

                    b.Property<byte>("Level");

                    b.Property<long>("LevelXp");

                    b.Property<short>("MapId");

                    b.Property<short>("MapX");

                    b.Property<short>("MapY");

                    b.Property<int>("MasterPoints");

                    b.Property<int>("MasterTicket");

                    b.Property<byte>("MaxMateCount");

                    b.Property<bool>("MinilandInviteBlocked");

                    b.Property<string>("MinilandMessage");

                    b.Property<short>("MinilandPoint");

                    b.Property<byte>("MinilandState");

                    b.Property<bool>("MouseAimLock");

                    b.Property<int>("Mp");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Prefix");

                    b.Property<bool>("QuickGetUp");

                    b.Property<long>("RagePoint");

                    b.Property<long>("Reput");

                    b.Property<byte>("Slot");

                    b.Property<int>("SpAdditionPoint");

                    b.Property<int>("SpPoint");

                    b.Property<byte>("State");

                    b.Property<int>("TalentLose");

                    b.Property<int>("TalentSurrender");

                    b.Property<int>("TalentWin");

                    b.Property<bool>("WhisperBlocked");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("character");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterQuicklistModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CharacterId");

                    b.Property<short>("EnumType");

                    b.Property<bool>("IsQ1");

                    b.Property<bool>("IsSkill");

                    b.Property<short>("Position");

                    b.Property<short>("RelatedSlot");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("quicklist");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterSkillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CharacterId");

                    b.Property<long>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("character_skill");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Drops.MapDropModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DropChance");

                    b.Property<long>("ItemId");

                    b.Property<long>("TypedId");

                    b.HasKey("Id");

                    b.HasIndex("TypedId");

                    b.ToTable("map_drop");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Drops.NpcMonsterDropModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DropChance");

                    b.Property<long>("ItemId");

                    b.Property<long>("TypedId");

                    b.HasKey("Id");

                    b.HasIndex("TypedId");

                    b.ToTable("_data_npc_monster_drops");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.ItemModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<byte>("BasicUpgrade");

                    b.Property<byte>("CellonLvl");

                    b.Property<byte>("Class");

                    b.Property<short>("CloseDefence");

                    b.Property<byte>("Color");

                    b.Property<short>("Concentrate");

                    b.Property<byte>("CriticalLuckRate");

                    b.Property<short>("CriticalRate");

                    b.Property<short>("DamageMaximum");

                    b.Property<short>("DamageMinimum");

                    b.Property<byte>("DarkElement");

                    b.Property<short>("DarkResistance");

                    b.Property<short>("DefenceDodge");

                    b.Property<short>("DistanceDefence");

                    b.Property<short>("DistanceDefenceDodge");

                    b.Property<short>("Effect");

                    b.Property<int>("EffectValue");

                    b.Property<byte>("Element");

                    b.Property<short>("ElementRate");

                    b.Property<byte>("EquipmentSlot");

                    b.Property<byte>("FireElement");

                    b.Property<short>("FireResistance");

                    b.Property<bool>("Flag1");

                    b.Property<bool>("Flag2");

                    b.Property<bool>("Flag3");

                    b.Property<bool>("Flag4");

                    b.Property<bool>("Flag5");

                    b.Property<bool>("Flag6");

                    b.Property<bool>("Flag7");

                    b.Property<bool>("Flag8");

                    b.Property<bool>("Flag9");

                    b.Property<byte>("Height");

                    b.Property<short>("HitRate");

                    b.Property<short>("Hp");

                    b.Property<short>("HpRegeneration");

                    b.Property<bool>("IsColored");

                    b.Property<bool>("IsConsumable");

                    b.Property<bool>("IsDroppable");

                    b.Property<bool>("IsHeroic");

                    b.Property<bool>("IsMinilandActionable");

                    b.Property<bool>("IsSoldable");

                    b.Property<bool>("IsTradable");

                    b.Property<bool>("IsWarehouse");

                    b.Property<byte>("ItemSubType");

                    b.Property<byte>("ItemType");

                    b.Property<long>("ItemValidTime");

                    b.Property<byte>("LevelJobMinimum");

                    b.Property<byte>("LevelMinimum");

                    b.Property<byte>("LightElement");

                    b.Property<short>("LightResistance");

                    b.Property<short>("MagicDefence");

                    b.Property<byte>("MaxCellon");

                    b.Property<byte>("MaxCellonLvl");

                    b.Property<short>("MaxElementRate");

                    b.Property<byte>("MaximumAmmo");

                    b.Property<int>("MinilandObjectPoint");

                    b.Property<short>("MoreHp");

                    b.Property<short>("MoreMp");

                    b.Property<short>("Morph");

                    b.Property<short>("Mp");

                    b.Property<short>("MpRegeneration");

                    b.Property<string>("Name");

                    b.Property<long>("Price");

                    b.Property<short>("PvpDefence");

                    b.Property<byte>("PvpStrength");

                    b.Property<short>("ReduceOposantResistance");

                    b.Property<long>("ReputPrice");

                    b.Property<byte>("ReputationMinimum");

                    b.Property<byte>("SecondaryElement");

                    b.Property<byte>("Sex");

                    b.Property<byte>("SpType");

                    b.Property<byte>("Speed");

                    b.Property<byte>("Type");

                    b.Property<short>("WaitDelay");

                    b.Property<byte>("WaterElement");

                    b.Property<short>("WaterResistance");

                    b.Property<byte>("Width");

                    b.HasKey("Id");

                    b.ToTable("_data_item");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("AllowPvp");

                    b.Property<bool>("AllowShop");

                    b.Property<byte[]>("Grid");

                    b.Property<short>("Height");

                    b.Property<int>("Music");

                    b.Property<string>("Name");

                    b.Property<short>("Width");

                    b.HasKey("Id");

                    b.ToTable("_data_map");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapMonsterModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsMoving");

                    b.Property<long>("MapId");

                    b.Property<short>("MapX");

                    b.Property<short>("MapY");

                    b.Property<long>("NpcMonsterId");

                    b.Property<int>("Position");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("NpcMonsterId");

                    b.ToTable("map_monsters");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapNpcModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<short>("Dialog");

                    b.Property<int>("Direction");

                    b.Property<short>("Effect");

                    b.Property<short>("EffectDelay");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsMoving");

                    b.Property<bool>("IsSitting");

                    b.Property<long>("MapId");

                    b.Property<short>("MapX");

                    b.Property<short>("MapY");

                    b.Property<long>("NpcMonsterId");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("NpcMonsterId");

                    b.ToTable("map_npcs");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapPortalModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DestinationMapId");

                    b.Property<short>("DestinationX");

                    b.Property<short>("DestinationY");

                    b.Property<bool>("IsDisabled");

                    b.Property<long>("SourceMapId");

                    b.Property<short>("SourceX");

                    b.Property<short>("SourceY");

                    b.Property<short>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SourceMapId");

                    b.ToTable("map_portals");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<byte>("AmountRequired");

                    b.Property<byte>("AttackClass");

                    b.Property<byte>("AttackUpgrade");

                    b.Property<byte>("BasicArea");

                    b.Property<short>("BasicCooldown");

                    b.Property<byte>("BasicRange");

                    b.Property<short>("BasicSkill");

                    b.Property<bool>("CanCatch");

                    b.Property<bool>("CanCollect");

                    b.Property<bool>("CanRegenMp");

                    b.Property<bool>("CantDebuff");

                    b.Property<bool>("CantTargetInfo");

                    b.Property<bool>("CantVoke");

                    b.Property<bool>("CantWalk");

                    b.Property<short>("CloseDefence");

                    b.Property<short>("Concentrate");

                    b.Property<byte>("CriticalChance");

                    b.Property<short>("CriticalRate");

                    b.Property<short>("DamageMaximum");

                    b.Property<short>("DamageMinimum");

                    b.Property<short>("DarkResistance");

                    b.Property<short>("DefenceDodge");

                    b.Property<byte>("DefenceUpgrade");

                    b.Property<short>("DistanceDefence");

                    b.Property<short>("DistanceDefenceDodge");

                    b.Property<int>("Element");

                    b.Property<short>("ElementRate");

                    b.Property<short>("FireResistance");

                    b.Property<int>("GiveDamagePercentage");

                    b.Property<byte>("HeroLevel");

                    b.Property<int>("HeroXp");

                    b.Property<bool>("IsHostile");

                    b.Property<bool>("IsHostileGroup");

                    b.Property<bool>("IsPercent");

                    b.Property<int>("JobXp");

                    b.Property<byte>("Level");

                    b.Property<short>("LightResistance");

                    b.Property<short>("MagicDefence");

                    b.Property<int>("MaxHp");

                    b.Property<int>("MaxMp");

                    b.Property<int>("MonsterType");

                    b.Property<string>("Name");

                    b.Property<bool>("NoAggresiveIcon");

                    b.Property<byte>("NoticeRange");

                    b.Property<byte>("Race");

                    b.Property<byte>("RaceType");

                    b.Property<int>("RespawnTime");

                    b.Property<byte>("Speed");

                    b.Property<int>("TakeDamages");

                    b.Property<short>("VNumRequired");

                    b.Property<short>("WaterResistance");

                    b.Property<int>("Xp");

                    b.HasKey("Id");

                    b.ToTable("_data_npc_monster");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterSkillModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NpcMonsterId");

                    b.Property<short>("Rate");

                    b.Property<long>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("NpcMonsterId");

                    b.HasIndex("SkillId");

                    b.ToTable("_data_npc_monster_skill");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.RecipeItemModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Amount");

                    b.Property<long>("ItemId");

                    b.Property<long>("RecipeId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RecipeId");

                    b.ToTable("shop_recipe_item");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.RecipeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Amount");

                    b.Property<long>("ItemId");

                    b.Property<long>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("shop_recipe");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.ShopItemModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Color");

                    b.Property<long>("ItemId");

                    b.Property<short>("Rare");

                    b.Property<long>("ShopId");

                    b.Property<byte>("Slot");

                    b.Property<byte>("Type");

                    b.Property<byte>("Upgrade");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("shop_item");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.ShopModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("MapNpcId");

                    b.Property<byte>("MenuType");

                    b.Property<string>("Name");

                    b.Property<byte>("ShopType");

                    b.HasKey("Id");

                    b.HasIndex("MapNpcId")
                        .IsUnique();

                    b.ToTable("map_npcs_shop");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.ShopSkillModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ShopId");

                    b.Property<long>("SkillId");

                    b.Property<byte>("Slot");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("SkillId");

                    b.ToTable("shop_skill");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Skill.SkillModel", b =>
                {
                    b.Property<long>("Id");

                    b.Property<short>("AttackAnimation");

                    b.Property<short>("CastAnimation");

                    b.Property<short>("CastEffect");

                    b.Property<short>("CastId");

                    b.Property<short>("CastTime");

                    b.Property<byte>("Class");

                    b.Property<short>("Cooldown");

                    b.Property<byte>("CpCost");

                    b.Property<short>("Duration");

                    b.Property<short>("Effect");

                    b.Property<byte>("Element");

                    b.Property<byte>("HitType");

                    b.Property<short>("ItemVNum");

                    b.Property<byte>("Level");

                    b.Property<byte>("LevelMinimum");

                    b.Property<byte>("MinimumAdventurerLevel");

                    b.Property<byte>("MinimumArcherLevel");

                    b.Property<byte>("MinimumMagicianLevel");

                    b.Property<byte>("MinimumSwordmanLevel");

                    b.Property<short>("MpCost");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.Property<byte>("Range");

                    b.Property<byte>("SkillType");

                    b.Property<byte>("TargetRange");

                    b.Property<byte>("TargetType");

                    b.Property<byte>("Type");

                    b.Property<short>("UpgradeSkill");

                    b.Property<short>("UpgradeType");

                    b.HasKey("Id");

                    b.ToTable("_data_skill");
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.CardBCardModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.CardModel", "Card")
                        .WithMany("BCards")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.ItemBCardModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.ItemModel", "Item")
                        .WithMany("BCards")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.NpcMonsterBCardModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", "NpcMonster")
                        .WithMany("BCards")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.BCard.SkillBCardModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Skill.SkillModel", "Skill")
                        .WithMany("BCards")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterItemModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Character.CharacterModel", "BoundCharacterModel")
                        .WithMany("BoundItems")
                        .HasForeignKey("BoundCharacterId");

                    b.HasOne("NosSharp.DatabasePlugin.Models.Character.CharacterModel", "Character")
                        .WithMany("Items")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.ItemModel", "Item")
                        .WithMany("CharacterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterMateModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Character.CharacterModel", "Character")
                        .WithMany("Mates")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", "NpcMonster")
                        .WithMany("CharacterMates")
                        .HasForeignKey("NpcMonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Character.AccountModel", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterQuicklistModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Character.CharacterModel", "Character")
                        .WithMany("Quicklist")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Character.CharacterSkillModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Character.CharacterModel", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.Skill.SkillModel", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Drops.MapDropModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Map.MapModel", "Map")
                        .WithMany("Drops")
                        .HasForeignKey("TypedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Drops.NpcMonsterDropModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", "NpcMonster")
                        .WithMany("Drops")
                        .HasForeignKey("TypedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapMonsterModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Map.MapModel", "Map")
                        .WithMany("Monsters")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", "NpcMonster")
                        .WithMany("MapNpcMonsters")
                        .HasForeignKey("NpcMonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapNpcModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Map.MapModel", "Map")
                        .WithMany("Npcs")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", "NpcMonster")
                        .WithMany()
                        .HasForeignKey("NpcMonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Map.MapPortalModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Map.MapModel", "SourceMap")
                        .WithMany("Portals")
                        .HasForeignKey("SourceMapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterSkillModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.NpcMonster.NpcMonsterModel", "NpcMonster")
                        .WithMany("Skills")
                        .HasForeignKey("NpcMonsterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.Skill.SkillModel", "Skill")
                        .WithMany("NpcMonsterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.RecipeItemModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.ItemModel", "Item")
                        .WithMany("RecipeItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosSharp.DatabasePlugin.Models.Shop.RecipeModel", "Recipe")
                        .WithMany("RecipeItems")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.RecipeModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.ItemModel", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.Shop.ShopModel", "Shop")
                        .WithMany("Recipes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.ShopItemModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.ItemModel", "Item")
                        .WithMany("ShopItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.Shop.ShopModel", "Shop")
                        .WithMany("ShopItems")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.ShopModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Map.MapNpcModel", "MapNpc")
                        .WithOne("Shop")
                        .HasForeignKey("NosSharp.DatabasePlugin.Models.Shop.ShopModel", "MapNpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NosSharp.DatabasePlugin.Models.Shop.ShopSkillModel", b =>
                {
                    b.HasOne("NosSharp.DatabasePlugin.Models.Shop.ShopModel", "Shop")
                        .WithMany("ShopSkills")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NosSharp.DatabasePlugin.Models.Skill.SkillModel", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
